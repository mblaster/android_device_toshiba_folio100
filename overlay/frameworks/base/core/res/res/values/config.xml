<?xml version="1.0" encoding="utf-8"?>
<!--
/*
** Copyright 2009, The Android Open Source Project
**
** Licensed under the Apache License, Version 2.0 (the "License"); 
** you may not use this file except in compliance with the License. 
** You may obtain a copy of the License at 
**
**     http://www.apache.org/licenses/LICENSE-2.0 
**
** Unless required by applicable law or agreed to in writing, software 
** distributed under the License is distributed on an "AS IS" BASIS, 
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
** See the License for the specific language governing permissions and 
** limitations under the License.
*/
-->

<!-- These resources are around just to allow their values to be customized
     for different hardware and product builds. -->
<resources>
    <!-- Height of the status bar -->
    <dimen name="status_bar_height">35dip</dimen>
    <!-- Height of the status bar -->
    <dimen name="status_bar_icon_size">35dip</dimen>
    <!-- Margin at the edge of the screen to ignore touch events for in the windowshade. -->
    <dimen name="status_bar_edge_ignore">5dp</dimen>

    <!-- The duration (in milliseconds) that the radio will scan for a signal
         when there's no network connection. If the scan doesn't timeout, use zero -->
    <integer name="config_radioScanningTimeout">1</integer>

    <!-- An Array of "[Connection name],[ConnectivityManager connection type],
         [associated radio-type],[priority]  -->
    <string-array translatable="false" name="networkAttributes">
        <item>"wifi,1,1,1"</item>
    </string-array>

    <!-- This string array should be overridden by the device to present a list of radio
         attributes.  This is used by the connectivity manager to decide which networks can coexist
         based on the hardware -->
    <!-- An Array of "[ConnectivityManager connectionType],
                      [# simultaneous connection types]"  -->
    <string-array translatable="false" name="radioAttributes">
        <item>"1,1"</item>
    </string-array>

    <!-- Flag indicating whether the we should enable the automatic brightness in Settings.
         Software implementation will be used if config_hardware_auto_brightness_available is not set -->
    <bool name="config_automatic_brightness_available">true</bool>
    
    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N + 1 zones as follows:

         Zone 0:        0 <= LUX < array[0]
         Zone 1:        array[0] <= LUX < array[1]
         ...
         Zone N:        array[N - 1] <= LUX < array[N]
         Zone N + 1:    array[N] <= LUX < infinity

         Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>20</item>
        <item>100</item>
        <item>1500</item>
    </integer-array>

    <!-- Array of output values for LCD backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLcdBacklightValues">
        <item>16</item>
        <item>50</item>
        <item>70</item>
        <item>240</item>
    </integer-array>

    <!-- Component name of the service providing network location support. -->
    <string name="config_networkLocationProvider">com.google.android.location.NetworkLocationProvider</string>

    <!-- Component name of the service providing geocoder API support. -->
    <string name="config_geocodeProvider">com.google.android.location.GeocodeProvider</string>
    
    <!-- Configure rotary outer radius -->
    <integer name="config_rotaryOuterRadiusDIP">1020</integer>

    <!-- toggles weather device is tablet or phone. right now,
    tablets are know to have soft buttons, but phones have harware
    buttons. this might change in the future - especially when the
    honeycomb modifications become available for phones -->
    <bool name="cm_default_is_tablet">true</bool>

    <!-- toggles weather device uses soft buttons or got hardware
    buttons. as the time of writing for android 2.3.3. all soft button
    enabled devices are tablets, all disabled are phones. -->
    <bool name="cm_default_has_soft_buttons">true</bool>

    <!-- if true, status bar is shown on bottom by default -->
    <bool name="cm_default_bottom_status_bar">true</bool>
    <!-- if true, dead zone is activated, which disables pull
    out of the status bar on the middle area - i.e. for people
    who start drag-out events accidently while trying to hit
    the space key -->
    <bool name="cm_default_use_dead_zone">false</bool>
    <!-- if true, soft buttons shown on left, false show them on
    right side of status bar -->
    <bool name="cm_default_soft_buttons_left">true</bool>

    <!-- toggle which buttons to show if soft buttons enabled
    quickna: opens notification area with the press of one button
    instead of swiping the long way up/down on big tablets -->
    <bool name="cm_default_show_soft_home">false</bool>
    <bool name="cm_default_show_soft_menu">true</bool>
    <bool name="cm_default_show_soft_back">true</bool>
    <bool name="cm_default_show_soft_search">true</bool>
    <bool name="cm_default_show_soft_quick_na">true</bool>

    <!-- disables display of lockscreen both on boot as on
    power button press to wake devices. usful for devices you
    dont carry in pockets -->
    <bool name="cm_default_disable_lockscreen">true</bool>
    <!--  option only available for devices with soft buttons.
    when enabled, fullscreen apps show the status bar. status
    bar then gets an adition hide button to switch to real
    fullscreen  -->
    <bool name="cm_default_disable_fullscreen">true</bool>

    <!-- toggles which button to use to unhide the status bar
    to show soft buttons again (see last comment). this is an
    index. to know, which index matches which button, see
    arrays.xml of CMParts. at the bottom of this file, menu
    entries like "menu, back, home" are mapped to indexes -->
    <integer name="cm_default_unhide_button_index">2</integer>

    <!-- when enabled, the power menu (shown when long-pressing
    power... includes reboot and power off) is extended by
    some more options which reflect the soft keys. ignored if soft
    keys are disabled -->
    <bool name="cm_default_extend_power_menu">true</bool>

    <!--  toggles which buttons to show on extended power menu -->
    <bool name="cm_default_power_menu_home">true</bool>
    <bool name="cm_default_power_menu_menu">true</bool>
    <bool name="cm_default_power_menu_back">false</bool>



    
</resources>
